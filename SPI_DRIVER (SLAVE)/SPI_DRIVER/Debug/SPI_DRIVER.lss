
SPI_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000780  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800068  00800068  0000081c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b3b  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d88  00000000  00000000  00002603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144e  00000000  00000000  0000338b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  000047dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097c  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d0  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_4>
  14:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_9>
  28:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_10>
  2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_13>
  38:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_14>
  3c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8a:	0c 94 be 03 	jmp	0x77c	; 0x77c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_INIT>:
 * Created: 10/11/2021 11:06:21 PM
 *  Author: Omar
 */ 
#include "app.h"
void APP_INIT(OPERATING_MODE mode)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	27 97       	sbiw	r28, 0x07	; 7
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	SPI_INIT(mode);
  a6:	0e 94 83 00 	call	0x106	; 0x106 <SPI_INIT>
	uart_config conf = {2400, asynchronous, one_stop_bit, no_parity, eight_bit, Disable};
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <APP_INIT+0x22>
	uart_hal_init(conf);
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	3a 81       	ldd	r19, Y+2	; 0x02
  c0:	4b 81       	ldd	r20, Y+3	; 0x03
  c2:	5c 81       	ldd	r21, Y+4	; 0x04
  c4:	6d 81       	ldd	r22, Y+5	; 0x05
  c6:	7e 81       	ldd	r23, Y+6	; 0x06
  c8:	8f 81       	ldd	r24, Y+7	; 0x07
  ca:	0e 94 90 00 	call	0x120	; 0x120 <uart_hal_init>
	Enable_Port(PC);
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 7f 00 	call	0xfe	; 0xfe <Enable_Port>
}
  d4:	27 96       	adiw	r28, 0x07	; 7
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <APP_Flow>:
void APP_Flow()
{ 
	SPI_Slave_receiveString(&str);
  e6:	8c e7       	ldi	r24, 0x7C	; 124
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Slave_receiveString>
	uart_sendString(&str);
  ee:	8c e7       	ldi	r24, 0x7C	; 124
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 a5 00 	call	0x14a	; 0x14a <uart_sendString>
	uart_sendByte(NEW_LINE);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 a8 00 	call	0x150	; 0x150 <uart_sendByte>
  fc:	08 95       	ret

000000fe <Enable_Port>:
 *  Author: Omar
 */ 
#include "DIO_HAL.h"
void Enable_Port(uint8_t port_name)
{
	DIO_init(port_name, ALL_PORT);
  fe:	6f ef       	ldi	r22, 0xFF	; 255
 100:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_init>
 104:	08 95       	ret

00000106 <SPI_INIT>:
	SPI_Master_send_string(str, slave_num);
}
uint8_t SPI_Slave_receiveByte()
{
	return SPI_Slave_receive_byte();
}
 106:	81 11       	cpse	r24, r1
 108:	03 c0       	rjmp	.+6      	; 0x110 <SPI_INIT+0xa>
 10a:	0e 94 c9 00 	call	0x192	; 0x192 <SPI_MasterInit>
 10e:	08 95       	ret
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	11 f4       	brne	.+4      	; 0x118 <SPI_INIT+0x12>
 114:	0e 94 df 00 	call	0x1be	; 0x1be <SPI_SlaveInit>
 118:	08 95       	ret

0000011a <SPI_Slave_receiveString>:
void SPI_Slave_receiveString(uint8_t* str)
{
	SPI_Slave_receive_string(str);
 11a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SPI_Slave_receive_string>
 11e:	08 95       	ret

00000120 <uart_hal_init>:
{
	uart_send_string(str);
}
void uart_receiveString(uint8_t* str)
{
	uart_receive_string(str);
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	27 97       	sbiw	r28, 0x07	; 7
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uart_init>
 138:	27 96       	adiw	r28, 0x07	; 7
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <uart_sendString>:
 14a:	0e 94 89 03 	call	0x712	; 0x712 <uart_send_string>
 14e:	08 95       	ret

00000150 <uart_sendByte>:
}
void uart_sendByte(uint8_t data)
{
	uart_send_byte(data);
 150:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_send_byte>
 154:	08 95       	ret

00000156 <main>:

int main(void)
{
    /* Replace with your application code */
	
	APP_INIT(SLAVE);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 49 00 	call	0x92	; 0x92 <APP_INIT>
	
    while (1) 
    {
		APP_Flow();
 15c:	0e 94 73 00 	call	0xe6	; 0xe6 <APP_Flow>
 160:	fd cf       	rjmp	.-6      	; 0x15c <main+0x6>

00000162 <DIO_init>:
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	51 f0       	breq	.+20     	; 0x17a <DIO_init+0x18>
 166:	28 f0       	brcs	.+10     	; 0x172 <DIO_init+0x10>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	59 f0       	breq	.+22     	; 0x182 <DIO_init+0x20>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	69 f0       	breq	.+26     	; 0x18a <DIO_init+0x28>
 170:	08 95       	ret
 172:	8a b3       	in	r24, 0x1a	; 26
 174:	68 2b       	or	r22, r24
 176:	6a bb       	out	0x1a, r22	; 26
 178:	08 95       	ret
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	68 2b       	or	r22, r24
 17e:	67 bb       	out	0x17, r22	; 23
 180:	08 95       	ret
 182:	84 b3       	in	r24, 0x14	; 20
 184:	68 2b       	or	r22, r24
 186:	64 bb       	out	0x14, r22	; 20
 188:	08 95       	ret
 18a:	81 b3       	in	r24, 0x11	; 17
 18c:	68 2b       	or	r22, r24
 18e:	61 bb       	out	0x11, r22	; 17
 190:	08 95       	ret

00000192 <SPI_MasterInit>:
	while(str[char_index] != '\0')
	{
		SPI_Master_send_byte(str[char_index], slave_ID);
		char_index++;
	}
}
 192:	87 b3       	in	r24, 0x17	; 23
 194:	80 68       	ori	r24, 0x80	; 128
 196:	87 bb       	out	0x17, r24	; 23
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	87 bb       	out	0x17, r24	; 23
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	87 bb       	out	0x17, r24	; 23
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	87 bb       	out	0x17, r24	; 23
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	8d b1       	in	r24, 0x0d	; 13
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8d b9       	out	0x0d, r24	; 13
 1b6:	8d b1       	in	r24, 0x0d	; 13
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	8d b9       	out	0x0d, r24	; 13
 1bc:	08 95       	ret

000001be <SPI_SlaveInit>:
 1be:	87 b3       	in	r24, 0x17	; 23
 1c0:	8f 77       	andi	r24, 0x7F	; 127
 1c2:	87 bb       	out	0x17, r24	; 23
 1c4:	87 b3       	in	r24, 0x17	; 23
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	87 bb       	out	0x17, r24	; 23
 1ca:	87 b3       	in	r24, 0x17	; 23
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	87 bb       	out	0x17, r24	; 23
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	8d b1       	in	r24, 0x0d	; 13
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	8d b9       	out	0x0d, r24	; 13
 1dc:	08 95       	ret

000001de <SPI_Slave_receive_byte>:
 1de:	77 9b       	sbis	0x0e, 7	; 14
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <SPI_Slave_receive_byte>
 1e2:	8f b1       	in	r24, 0x0f	; 15
 1e4:	08 95       	ret

000001e6 <SPI_Slave_receive_string>:
void SPI_Slave_receive_string(uint8_t* str)
{
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	8c 01       	movw	r16, r24
	uint8_t char_index =0;
	str[char_index] = SPI_Slave_receive_byte();
 1f2:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Slave_receive_byte>
 1f6:	f8 01       	movw	r30, r16
 1f8:	80 83       	st	Z, r24
		char_index++;
	}
}
void SPI_Slave_receive_string(uint8_t* str)
{
	uint8_t char_index =0;
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
	str[char_index] = SPI_Slave_receive_byte();
	while(str[char_index] != '\0')
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <SPI_Slave_receive_string+0x28>
	{
		char_index++;
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
		str[char_index] = SPI_Slave_receive_byte();
 200:	78 01       	movw	r14, r16
 202:	ec 0e       	add	r14, r28
 204:	f1 1c       	adc	r15, r1
 206:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Slave_receive_byte>
 20a:	f7 01       	movw	r30, r14
 20c:	80 83       	st	Z, r24
}
void SPI_Slave_receive_string(uint8_t* str)
{
	uint8_t char_index =0;
	str[char_index] = SPI_Slave_receive_byte();
	while(str[char_index] != '\0')
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	81 11       	cpse	r24, r1
 218:	f2 cf       	rjmp	.-28     	; 0x1fe <SPI_Slave_receive_string+0x18>
	{
		char_index++;
		str[char_index] = SPI_Slave_receive_byte();
	}
	str[char_index] = '\0';
 21a:	10 82       	st	Z, r1
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <__vector_7>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
 24a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Timer1_Call_Back_Ptr>
 24e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Timer1_Call_Back_Ptr+0x1>
 252:	09 95       	icall
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_9>:
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
 298:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Timer1_Call_Back_Ptr>
 29c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Timer1_Call_Back_Ptr+0x1>
 2a0:	09 95       	icall
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_10>:
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
 2e6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer0_Call_Back_Ptr>
 2ea:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer0_Call_Back_Ptr+0x1>
 2ee:	09 95       	icall
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_11>:
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer0_Call_Back_Ptr>
 338:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer0_Call_Back_Ptr+0x1>
 33c:	09 95       	icall
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_4>:
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 386:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 38a:	09 95       	icall
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_5>:
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
 3d0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3d4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3d8:	09 95       	icall
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_13>:
		return -1;
		/* Filter the 9th bit, then return */
		ninth_bit = (ninth_bit >> 1) & 0x01;
		return ((ninth_bit << 8) | data_eight_bits);
	}
}
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
 41e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <RX_CALL_BACK>
 422:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <RX_CALL_BACK+0x1>
 426:	09 95       	icall
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_14>:
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
 46c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TX_CALL_BACK>
 470:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TX_CALL_BACK+0x1>
 474:	09 95       	icall
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_15>:
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
 4ba:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <DATA_REGEmpty_CALL_BACK>
 4be:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <DATA_REGEmpty_CALL_BACK+0x1>
 4c2:	09 95       	icall
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <uart_init>:
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	27 97       	sbiw	r28, 0x07	; 7
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	29 83       	std	Y+1, r18	; 0x01
 4fc:	3a 83       	std	Y+2, r19	; 0x02
 4fe:	4b 83       	std	Y+3, r20	; 0x03
 500:	5c 83       	std	Y+4, r21	; 0x04
 502:	6d 83       	std	Y+5, r22	; 0x05
 504:	7e 83       	std	Y+6, r23	; 0x06
 506:	8f 83       	std	Y+7, r24	; 0x07
 508:	87 e0       	ldi	r24, 0x07	; 7
 50a:	fe 01       	movw	r30, r28
 50c:	31 96       	adiw	r30, 0x01	; 1
 50e:	a4 e7       	ldi	r26, 0x74	; 116
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	01 90       	ld	r0, Z+
 514:	0d 92       	st	X+, r0
 516:	8a 95       	dec	r24
 518:	e1 f7       	brne	.-8      	; 0x512 <uart_init+0x2c>
 51a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <conf+0x2>
 51e:	80 31       	cpi	r24, 0x10	; 16
 520:	61 f4       	brne	.+24     	; 0x53a <uart_init+0x54>
 522:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <divisor>
 526:	80 b5       	in	r24, 0x20	; 32
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	80 bd       	out	0x20, r24	; 32
 52c:	80 b5       	in	r24, 0x20	; 32
 52e:	8f 7b       	andi	r24, 0xBF	; 191
 530:	80 bd       	out	0x20, r24	; 32
 532:	8b b1       	in	r24, 0x0b	; 11
 534:	8d 7f       	andi	r24, 0xFD	; 253
 536:	8b b9       	out	0x0b, r24	; 11
 538:	1b c0       	rjmp	.+54     	; 0x570 <uart_init+0x8a>
 53a:	88 30       	cpi	r24, 0x08	; 8
 53c:	61 f4       	brne	.+24     	; 0x556 <uart_init+0x70>
 53e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <divisor>
 542:	80 b5       	in	r24, 0x20	; 32
 544:	80 68       	ori	r24, 0x80	; 128
 546:	80 bd       	out	0x20, r24	; 32
 548:	80 b5       	in	r24, 0x20	; 32
 54a:	8f 7b       	andi	r24, 0xBF	; 191
 54c:	80 bd       	out	0x20, r24	; 32
 54e:	8b b1       	in	r24, 0x0b	; 11
 550:	82 60       	ori	r24, 0x02	; 2
 552:	8b b9       	out	0x0b, r24	; 11
 554:	0d c0       	rjmp	.+26     	; 0x570 <uart_init+0x8a>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	59 f4       	brne	.+22     	; 0x570 <uart_init+0x8a>
 55a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <divisor>
 55e:	80 b5       	in	r24, 0x20	; 32
 560:	80 68       	ori	r24, 0x80	; 128
 562:	80 bd       	out	0x20, r24	; 32
 564:	80 b5       	in	r24, 0x20	; 32
 566:	80 64       	ori	r24, 0x40	; 64
 568:	80 bd       	out	0x20, r24	; 32
 56a:	80 b5       	in	r24, 0x20	; 32
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	80 bd       	out	0x20, r24	; 32
 570:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <conf+0x6>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	49 f4       	brne	.+18     	; 0x58a <uart_init+0xa4>
 578:	8a b1       	in	r24, 0x0a	; 10
 57a:	80 68       	ori	r24, 0x80	; 128
 57c:	8a b9       	out	0x0a, r24	; 10
 57e:	8a b1       	in	r24, 0x0a	; 10
 580:	80 64       	ori	r24, 0x40	; 64
 582:	8a b9       	out	0x0a, r24	; 10
 584:	8a b1       	in	r24, 0x0a	; 10
 586:	80 62       	ori	r24, 0x20	; 32
 588:	8a b9       	out	0x0a, r24	; 10
 58a:	8a b1       	in	r24, 0x0a	; 10
 58c:	80 61       	ori	r24, 0x10	; 16
 58e:	8a b9       	out	0x0a, r24	; 10
 590:	8a b1       	in	r24, 0x0a	; 10
 592:	88 60       	ori	r24, 0x08	; 8
 594:	8a b9       	out	0x0a, r24	; 10
 596:	80 b5       	in	r24, 0x20	; 32
 598:	80 68       	ori	r24, 0x80	; 128
 59a:	80 bd       	out	0x20, r24	; 32
 59c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <conf+0x4>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	69 f0       	breq	.+26     	; 0x5be <uart_init+0xd8>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <uart_init+0xca>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	89 f0       	breq	.+34     	; 0x5cc <uart_init+0xe6>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	b1 f0       	breq	.+44     	; 0x5da <uart_init+0xf4>
 5ae:	1b c0       	rjmp	.+54     	; 0x5e6 <uart_init+0x100>
 5b0:	80 b5       	in	r24, 0x20	; 32
 5b2:	8f 7e       	andi	r24, 0xEF	; 239
 5b4:	80 bd       	out	0x20, r24	; 32
 5b6:	80 b5       	in	r24, 0x20	; 32
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	80 bd       	out	0x20, r24	; 32
 5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <uart_init+0x100>
 5be:	80 b5       	in	r24, 0x20	; 32
 5c0:	80 61       	ori	r24, 0x10	; 16
 5c2:	80 bd       	out	0x20, r24	; 32
 5c4:	80 b5       	in	r24, 0x20	; 32
 5c6:	8f 7d       	andi	r24, 0xDF	; 223
 5c8:	80 bd       	out	0x20, r24	; 32
 5ca:	0d c0       	rjmp	.+26     	; 0x5e6 <uart_init+0x100>
 5cc:	80 b5       	in	r24, 0x20	; 32
 5ce:	8f 7e       	andi	r24, 0xEF	; 239
 5d0:	80 bd       	out	0x20, r24	; 32
 5d2:	80 b5       	in	r24, 0x20	; 32
 5d4:	80 62       	ori	r24, 0x20	; 32
 5d6:	80 bd       	out	0x20, r24	; 32
 5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <uart_init+0x100>
 5da:	80 b5       	in	r24, 0x20	; 32
 5dc:	80 61       	ori	r24, 0x10	; 16
 5de:	80 bd       	out	0x20, r24	; 32
 5e0:	80 b5       	in	r24, 0x20	; 32
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	80 bd       	out	0x20, r24	; 32
 5e6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <conf+0x3>
 5ea:	81 11       	cpse	r24, r1
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <uart_init+0x116>
 5ee:	80 b5       	in	r24, 0x20	; 32
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	80 bd       	out	0x20, r24	; 32
 5f4:	80 b5       	in	r24, 0x20	; 32
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	80 bd       	out	0x20, r24	; 32
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <uart_init+0x126>
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	31 f4       	brne	.+12     	; 0x60c <uart_init+0x126>
 600:	80 b5       	in	r24, 0x20	; 32
 602:	80 68       	ori	r24, 0x80	; 128
 604:	80 bd       	out	0x20, r24	; 32
 606:	80 b5       	in	r24, 0x20	; 32
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	80 bd       	out	0x20, r24	; 32
 60c:	80 b5       	in	r24, 0x20	; 32
 60e:	80 68       	ori	r24, 0x80	; 128
 610:	80 bd       	out	0x20, r24	; 32
 612:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <conf+0x5>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	f9 f0       	breq	.+62     	; 0x658 <uart_init+0x172>
 61a:	28 f4       	brcc	.+10     	; 0x626 <uart_init+0x140>
 61c:	88 23       	and	r24, r24
 61e:	41 f0       	breq	.+16     	; 0x630 <uart_init+0x14a>
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	81 f0       	breq	.+32     	; 0x644 <uart_init+0x15e>
 624:	36 c0       	rjmp	.+108    	; 0x692 <uart_init+0x1ac>
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	09 f1       	breq	.+66     	; 0x66c <uart_init+0x186>
 62a:	87 30       	cpi	r24, 0x07	; 7
 62c:	49 f1       	breq	.+82     	; 0x680 <uart_init+0x19a>
 62e:	31 c0       	rjmp	.+98     	; 0x692 <uart_init+0x1ac>
 630:	80 b5       	in	r24, 0x20	; 32
 632:	8d 7f       	andi	r24, 0xFD	; 253
 634:	80 bd       	out	0x20, r24	; 32
 636:	80 b5       	in	r24, 0x20	; 32
 638:	8b 7f       	andi	r24, 0xFB	; 251
 63a:	80 bd       	out	0x20, r24	; 32
 63c:	8a b1       	in	r24, 0x0a	; 10
 63e:	8b 7f       	andi	r24, 0xFB	; 251
 640:	8a b9       	out	0x0a, r24	; 10
 642:	27 c0       	rjmp	.+78     	; 0x692 <uart_init+0x1ac>
 644:	80 b5       	in	r24, 0x20	; 32
 646:	82 60       	ori	r24, 0x02	; 2
 648:	80 bd       	out	0x20, r24	; 32
 64a:	80 b5       	in	r24, 0x20	; 32
 64c:	8b 7f       	andi	r24, 0xFB	; 251
 64e:	80 bd       	out	0x20, r24	; 32
 650:	8a b1       	in	r24, 0x0a	; 10
 652:	8b 7f       	andi	r24, 0xFB	; 251
 654:	8a b9       	out	0x0a, r24	; 10
 656:	1d c0       	rjmp	.+58     	; 0x692 <uart_init+0x1ac>
 658:	80 b5       	in	r24, 0x20	; 32
 65a:	8d 7f       	andi	r24, 0xFD	; 253
 65c:	80 bd       	out	0x20, r24	; 32
 65e:	80 b5       	in	r24, 0x20	; 32
 660:	84 60       	ori	r24, 0x04	; 4
 662:	80 bd       	out	0x20, r24	; 32
 664:	8a b1       	in	r24, 0x0a	; 10
 666:	8b 7f       	andi	r24, 0xFB	; 251
 668:	8a b9       	out	0x0a, r24	; 10
 66a:	13 c0       	rjmp	.+38     	; 0x692 <uart_init+0x1ac>
 66c:	80 b5       	in	r24, 0x20	; 32
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	80 bd       	out	0x20, r24	; 32
 672:	80 b5       	in	r24, 0x20	; 32
 674:	84 60       	ori	r24, 0x04	; 4
 676:	80 bd       	out	0x20, r24	; 32
 678:	8a b1       	in	r24, 0x0a	; 10
 67a:	8b 7f       	andi	r24, 0xFB	; 251
 67c:	8a b9       	out	0x0a, r24	; 10
 67e:	09 c0       	rjmp	.+18     	; 0x692 <uart_init+0x1ac>
 680:	80 b5       	in	r24, 0x20	; 32
 682:	82 60       	ori	r24, 0x02	; 2
 684:	80 bd       	out	0x20, r24	; 32
 686:	80 b5       	in	r24, 0x20	; 32
 688:	84 60       	ori	r24, 0x04	; 4
 68a:	80 bd       	out	0x20, r24	; 32
 68c:	8a b1       	in	r24, 0x0a	; 10
 68e:	84 60       	ori	r24, 0x04	; 4
 690:	8a b9       	out	0x0a, r24	; 10
 692:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conf>
 696:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <conf+0x1>
 69a:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <divisor>
 69e:	48 9f       	mul	r20, r24
 6a0:	90 01       	movw	r18, r0
 6a2:	49 9f       	mul	r20, r25
 6a4:	30 0d       	add	r19, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	50 e0       	ldi	r21, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	72 e1       	ldi	r23, 0x12	; 18
 6b0:	8a e7       	ldi	r24, 0x7A	; 122
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 9c 03 	call	0x738	; 0x738 <__udivmodsi4>
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	31 09       	sbc	r19, r1
 6bc:	80 b5       	in	r24, 0x20	; 32
 6be:	8f 77       	andi	r24, 0x7F	; 127
 6c0:	80 bd       	out	0x20, r24	; 32
 6c2:	29 b9       	out	0x09, r18	; 9
 6c4:	30 bd       	out	0x20, r19	; 32
 6c6:	27 96       	adiw	r28, 0x07	; 7
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <uart_send_byte>:
 6d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <conf+0x5>
 6dc:	93 30       	cpi	r25, 0x03	; 3
 6de:	31 f0       	breq	.+12     	; 0x6ec <uart_send_byte+0x14>
 6e0:	99 23       	and	r25, r25
 6e2:	21 f0       	breq	.+8      	; 0x6ec <uart_send_byte+0x14>
 6e4:	91 30       	cpi	r25, 0x01	; 1
 6e6:	11 f0       	breq	.+4      	; 0x6ec <uart_send_byte+0x14>
 6e8:	92 30       	cpi	r25, 0x02	; 2
 6ea:	39 f4       	brne	.+14     	; 0x6fa <uart_send_byte+0x22>
 6ec:	5d 9b       	sbis	0x0b, 5	; 11
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <uart_send_byte+0x14>
 6f0:	8c b9       	out	0x0c, r24	; 12
 6f2:	8b b1       	in	r24, 0x0b	; 11
 6f4:	80 64       	ori	r24, 0x40	; 64
 6f6:	8b b9       	out	0x0b, r24	; 11
 6f8:	08 95       	ret
 6fa:	97 30       	cpi	r25, 0x07	; 7
 6fc:	49 f4       	brne	.+18     	; 0x710 <uart_send_byte+0x38>
 6fe:	5d 9b       	sbis	0x0b, 5	; 11
 700:	fe cf       	rjmp	.-4      	; 0x6fe <uart_send_byte+0x26>
 702:	9a b1       	in	r25, 0x0a	; 10
 704:	9e 7f       	andi	r25, 0xFE	; 254
 706:	9a b9       	out	0x0a, r25	; 10
 708:	9a b1       	in	r25, 0x0a	; 10
 70a:	91 60       	ori	r25, 0x01	; 1
 70c:	9a b9       	out	0x0a, r25	; 10
 70e:	8c b9       	out	0x0c, r24	; 12
 710:	08 95       	ret

00000712 <uart_send_string>:
void uart_send_string(const uint8_t* str)
{
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	8c 01       	movw	r16, r24
	uint8_t char_index =0;
 71a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[char_index] != '\0')
 71c:	03 c0       	rjmp	.+6      	; 0x724 <uart_send_string+0x12>
	{
		uart_send_byte(str[char_index]);
 71e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <uart_send_byte>
		char_index++;
 722:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void uart_send_string(const uint8_t* str)
{
	uint8_t char_index =0;
	while(str[char_index] != '\0')
 724:	f8 01       	movw	r30, r16
 726:	ec 0f       	add	r30, r28
 728:	f1 1d       	adc	r31, r1
 72a:	80 81       	ld	r24, Z
 72c:	81 11       	cpse	r24, r1
 72e:	f7 cf       	rjmp	.-18     	; 0x71e <uart_send_string+0xc>
	{
		uart_send_byte(str[char_index]);
		char_index++;
	}
}
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	08 95       	ret

00000738 <__udivmodsi4>:
 738:	a1 e2       	ldi	r26, 0x21	; 33
 73a:	1a 2e       	mov	r1, r26
 73c:	aa 1b       	sub	r26, r26
 73e:	bb 1b       	sub	r27, r27
 740:	fd 01       	movw	r30, r26
 742:	0d c0       	rjmp	.+26     	; 0x75e <__udivmodsi4_ep>

00000744 <__udivmodsi4_loop>:
 744:	aa 1f       	adc	r26, r26
 746:	bb 1f       	adc	r27, r27
 748:	ee 1f       	adc	r30, r30
 74a:	ff 1f       	adc	r31, r31
 74c:	a2 17       	cp	r26, r18
 74e:	b3 07       	cpc	r27, r19
 750:	e4 07       	cpc	r30, r20
 752:	f5 07       	cpc	r31, r21
 754:	20 f0       	brcs	.+8      	; 0x75e <__udivmodsi4_ep>
 756:	a2 1b       	sub	r26, r18
 758:	b3 0b       	sbc	r27, r19
 75a:	e4 0b       	sbc	r30, r20
 75c:	f5 0b       	sbc	r31, r21

0000075e <__udivmodsi4_ep>:
 75e:	66 1f       	adc	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	1a 94       	dec	r1
 768:	69 f7       	brne	.-38     	; 0x744 <__udivmodsi4_loop>
 76a:	60 95       	com	r22
 76c:	70 95       	com	r23
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	9b 01       	movw	r18, r22
 774:	ac 01       	movw	r20, r24
 776:	bd 01       	movw	r22, r26
 778:	cf 01       	movw	r24, r30
 77a:	08 95       	ret

0000077c <_exit>:
 77c:	f8 94       	cli

0000077e <__stop_program>:
 77e:	ff cf       	rjmp	.-2      	; 0x77e <__stop_program>
